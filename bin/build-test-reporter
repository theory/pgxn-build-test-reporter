#!/usr/bin/env perl

use strict;
use warnings;
use v5.30;

Reporter->new(@ARGV)->go;

package Reporter;
use strict;
use warnings;
use v5.30;
use IPC::Run qw(run);
use Config ();
use Symbol qw(gensym);
use JSON;
use TOML::Parser;
use Getopt::Long;
use WWW::PGXN;
use File::Path qw(make_path remove_tree);
use File::Basename;
use Parallel::WorkUnit;
use File::Temp;
use Time::HiRes qw(gettimeofday tv_interval);
use POSIX qw(strftime);
use Archive::Zip qw(:ERROR_CODES);

BEGIN {
     local $SIG{__WARN__} = sub {
        warn @_ if $_[0] !~ /Possible precedence issue/
    };
    require IPC::Semaphore::Concurrency;
}

sub new {
    Getopt::Long::Configure(qw(no_ignore_case bundling));
    my $self = bless {
        input_file => 'data/distributions.txt',
        work_dir   => 'work',
        verbose    => 1,
        dists      => [],
        pg_config  => $ENV{PG_CONFIG},
        lock_file  => File::Temp->new,
        pgxn       => WWW::PGXN->new(url => 'https://api.pgxn.org/'),
    } => __PACKAGE__;
    Getopt::Long::GetOptions(
        @_,
        'input-file|in=s'   => \$self->{input_file},
        'output-file|out=s' => \$self->{output_file},
        'work-dir|dir=s'    => \$self->{work_dir},
        'dist=s@'           => \$self->{dists},
        'verbose|v+'        => \$self->{verbose},
    ) or die "Usage: $0 --in INPUT_FILE --out OUTPUT_FILE\n";

    $self->{pg_config} ||= _find_pg_config();
    $self->status(2, "## Using $self->{pg_config}");

    $self->{pg_version} = _pg_version($self->{pg_config});
    $self->{pg_owner} = _pg_owner($self->{pg_config});
    $self->status(2, "## Using PostgreSQL $self->{pg_version}\n");

    # Set up the default output file.
    $self->{output_file} ||= strftime(
        "data/%Y-%m-%d-pg$self->{pg_version}-$Config::Config{myarchname}.log",
        gmtime
    );
    $self->status(2, "## Writing reults to $self->{output_file}\n");

    # Set up the semaphor to limit pgrx builds to one at a time.
    $self->{lock_file}->close;
    $self->{semaphore} = IPC::Semaphore::Concurrency->new(
        $self->{lock_file}->filename,
    );

    return $self;
}

sub status {
    my ($self, $lvl, $msg) = @_;
    say $msg unless $lvl > $self->{verbose};
}

sub go {
    my $self = shift;
    open my $in, '<:encoding(UTF-8)', $self->{input_file}
        or die "Cannot open $self->{input_file}: $!\n";
    open my $out, '>raw', $self->{output_file}
        or die "Cannot open $self->{output_file}: $!\n";
    $out->autoflush;

    make_path $self->{work_dir};
    chdir $self->{work_dir} || die "Cannot chdir into $self->{work_dir}\n";

    my $callback = sub {
        my $rec = shift;
        say {$out} encode_json $rec;
        $self->status(1, "## $rec->{package} " . ($rec->{success} ? "ok" : "not ok"));
    };
    my $p = Parallel::WorkUnit->new(max_children => 16);
    my %dists = map { lc $_ => 1 } @{ $self->{dists} };

    while (<$in>) {
        chomp;
        my ($name, $version) = split /\s+/;
        die "Error parsing $_\n" unless $name && $version;
        $p->queue(
            sub {
                # Record interrupted children.
                $SIG{TERM} = $SIG{INT} = sub {
                    $self->status(1, "$name $version interrupted");
                    exit;
                 };
                $self->pgxn_build($self->make_rec($name, $version));
            },
            $callback
        ) if !%dists || $dists{lc $name};
    }

    $p->waitall;
}

sub make_rec {
    my ($self, $name, $version) = @_;
    return {
        package   => $name,
        version   => $version,
        os        => $^O,
        postgres  => $self->{pg_version},
        arch      => $Config::Config{myarchname},
        success   => JSON::false,
        timestamp => strftime('%Y-%m-%dT%H:%M:%SZ', gmtime),
        steps     => [],
    };
}

sub pgxn_build {
    my ($self, $rec) = @_;
    my ($name, $version) = @{$rec}{qw(package version)};
    my $dist = $self->{pgxn}->get_distribution($name, $version) or do {
        $self->status(0, "### Cannot find $name $version on PGXN; skipping");
        return;
    };

    my $file = basename $dist->download_path;
    if (-e $file) {
        $self->status(2, "### $name: $file already downloaded");
    } else {
        $self->status(2, "### $name: Downloading $file");
        $dist->download_to('.');
    }

    my $dir = $file =~ s/\.zip$//r;
    remove_tree $dir if -e $dir;
    return $rec unless $self->unzip($rec, $file);
    chdir $dir or do {
        $rec->{reason} = "Cannot chdir into $dir: $!";
        return $rec;
    };
    return $self->build($rec);
}

sub unzip {
    my ($self, $rec, $zip_path) = @_;
    $self->status(2, "### $rec->{package}: unzip $zip_path");

    my @out = ("Archive:  $zip_path");
    Archive::Zip::setErrorHandler(sub { push @out, map { chomp; $_ } @_ });
    my $step = {
        name    => "unzip",
        command => ['unzip', $zip_path],
        exit    => 1,
        output  => \@out,
    };
    push @{ $rec->{steps} } => $step;

    my $time = [gettimeofday];
    my $zip = Archive::Zip->new;
    if ($zip->read($zip_path)!= AZ_OK) {
        $rec->{reason} = "Error reading $zip_path";
        return;
    }

    foreach my $member ($zip->members) {
        my $fn = $member->fileName;
        if ($fn =~ m{/[.]git(:?hub|attributes|ignore)?\b}) {
            push @out =>  "    SKIPPING $fn";
            next;
        }

        push @out =>  "    $fn";

        if ($member->isSymbolicLink) {
            # Delete existing so Archive::Zip won't fail to create it.
            push @out => "WARNING: Cannot unlink $fn: $!" if -e $fn && !unlink $fn;
        }

        if ($member->extractToFileNamed($fn) != AZ_OK) {
            $rec->{reason} = "Error extracting $fn";
            $step->{duration} = tv_interval $time;
            return;
        }
    }

    # Success.
    $step->{exit} = 0;
    $step->{duration} = tv_interval $time;

    return 1;
}

sub build {
    my ($self, $rec) = @_;
    if (-e 'Cargo.toml') {
        $self->pgrx_build($rec);
    } elsif (-e 'Makefile' || -e 'makefile' || -e 'GNUmakefile' || -e 'Configure' || -e 'configure' || -e 'CMakeLists.txt') {
        $self->pgxs_build($rec);
    } else {
        $rec->{reason} = "Could not determine build pipeline";
    }
    return $rec;
}

sub pgxs_build {
    my ($self, $rec) = @_;
    $rec->{pipeline} = 'pgxs';
    if (-e 'Configure') {
        return unless $self->_run($rec, 'sh Configure', qw(sh Configure));
    } elsif (-e 'configure') {
        return unless $self->_run($rec, 'sh configure', qw(sh configure));
    } elsif (-e 'CMakeLists.txt') {
        return unless $self->_run($rec, 'cmake .', qw(cmake .));
    }
    my @vars = ("PG_CONFIG=$self->{pg_config}");
    return unless $self->_run($rec, 'make', qw(make), @vars);
    return unless $self->_run($rec, 'make install', qw(sudo make install), @vars);

    # Only run `installcheck` if it appears to exist.
    return unless $self->try_regress($rec);

    # Mark success.
    $rec->{success} = JSON::true;
}

sub pgrx_build {
    my ($self, $rec) = @_;

    # PGRX builds must not be concurrent, because they might require different
    # versions that will stomp all over each other. So wait to aquire a lock.
    $self->{semaphore}->acquire(0, 1);

    local $ENV{CARGO_TERM_COLOR} = 'never';
    local $ENV{NO_COLOR} = 'true';

    $rec->{pipeline} = 'pgrx';
    my $cfg = TOML::Parser->new->parse_file('Cargo.toml');

    # Look for pgrx.
    my $pgrxv = $cfg->{dependencies}{pgrx} || do {
        # Maybe it's pgxs.
        return $self->pgxs_build($rec) if -e 'Makefile';
        $rec->{reason} = "pgrx not found in Cargo.toml";
        return $rec;
    };

    $pgrxv =~ s/^=//;

    return unless $self->_run(
        $rec, 'cargo install cargo-pgrx',
        qw(cargo install --locked cargo-pgrx --version), $pgrxv,
    );

    return unless $self->_run(
        $rec, 'cargo pgrx init',
        qw(cargo pgrx init), "--pg$self->{pg_version}=$self->{pg_config}",
    );

    # Must come before test: https://github.com/pgcentralfoundation/pgrx/issues/1670
    return unless $self->_run(
        $rec, 'cargo pgrx install',
        qw(cargo pgrx install --sudo --test --pg-config), $self->{pg_config},
    );

    if ($< != 0 && $self->{pg_owner} == $<) {
        # Curent user is not root and owns Postgres, just run the tests.
        return unless $self->_run(
            $rec, 'cargo pgrx test',
            qw(cargo pgrx test), "pg$self->{pg_version}",
        );
    } else {
        # Make sure we support this version of pgrx.
        my @v = split /[.]/ => $pgrxv, 3;
        die "Invalid pgrx version '$pgrxv'\n" unless @v == 3;
        $v[2] =~ s/\D+//g;
        if ($v[0] > 0 || $v[1] > 11 || ($v[1] == 11 && $v[2] > 3)) {
            # 0.11.4 gives us --runas and --pgdata. As long as the current
            # user has `sudo` privileges we can run the tests.
            my $datadir = File::Temp->newdir(PERMS => 0777);
            return unless $self->_run(
                $rec, 'cargo pgrx test',
                qw(cargo pgrx test --runas postgres --pgdata), $datadir->dirname,
                "pg$self->{pg_version}",
            );
        } else {
            $self->status(2,  "### $rec->{package}: skipping tests on pgrx $pgrxv");
        }
    }

    # Only run `installcheck` if it appears to exist.
    return unless $self->try_regress($rec);

    # Mark success.
    $rec->{success} = JSON::true;
}

sub try_regress {
    my ($self, $rec) = @_;
    my $file = 'Makefile';

    # Return success if there is no Makefile.
    return 1 unless -e $file;

    # Look for signs of installcheck in the Makefile.
    open my $fh, '<:raw', $file or die "Cannot open $file: $!\n";
    my $regress;
    while (<$fh>) {
        next unless /^REGRESS\s*=/ || /^installcheck:/;
        $regress = 1;
        last;
    }
    close $fh;

    # Return success if we found no installcheck target.
    return 1 unless $regress;

    # Run installcheck.
    return 1 if $self->_run(
        $rec, 'make installcheck', qw(make installcheck),
        "PG_CONFIG=$self->{pg_config}",
        "PGUSER=postgres",
    );

    # Failed. Try to find regression.diffs.
    $self->_run(
        $rec, 'cat regression.diffs',
        qw(find . -name regression.diffs -exec cat {} +),
    );

    # Return false.
    return;
}

sub _run {
    my ($self, $rec, $name, @cmd) = @_;
    $self->status(2,  "### $rec->{package}: $name");
    my $pipe = gensym;
    local $@;
    my $time = [gettimeofday];
    my $exit = -1;

    eval {
        # Let the command run for up to 5m
        local $SIG{ALRM} = sub { die "alarm\n" };
        alarm 300;
        run \@cmd, \undef, '>pipe', $pipe, '2>&1';
        $exit = $?;
        alarm 0;
    };

    # Record the outcome.
    my $err = $@;
    push @{ $rec->{steps} } => {
        name     => $name,
        command  => \@cmd,
        duration => tv_interval($time),
        exit     => $exit >> 8,
        output   => [ map { chomp; s/\e\[[0-9;]*m//g; $_ } <$pipe> ],
    };

    return 1 if $exit == 0;
    my $reason = $err && $err eq "alarm\n" ? 'timed out' : 'failed';
    $self->status(2, "### $rec->{package}: $name $reason");
    $rec->{reason} = "$name $reason";
    return 0;
}

sub _find_pg_config {
    run [qw(which pg_config)], \undef, \my $out or die "pg_config not found\n";
    chomp $out;
    return $out;
}

sub _pg_version {
    my $pg_config = shift;
    run [$pg_config, '--version'], \undef, \my $out or exit $? >> 8;
    $out =~ /(\d+)/ or die "No version found in $pg_config --version output:\n$out";
    return $1;
}

sub _pg_owner {
    my $pg_config = shift;
    run [$pg_config, '--sharedir'], \undef, \my $out or exit $? >> 8;
    chomp $out;
    my @s = stat $out;
    return $s[4];
}